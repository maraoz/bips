<pre>
  BIP:     BIP-NNNN
  Title:   Structure for Deterministic P2SH Multisignature Wallets
  Authors: Manuel Araoz <manu@bitpay.com>
           Ryan X Charles <ryan@bitpay.com>
           Matias Alejo Garcia <matias@bitpay.com>
  Status:  Draft
  Type:    Standards Track
  Created: yyyy-mm-dd
</pre>

==Abstract==

This BIP defines a structure for hierarchical deterministic P2SH multi-party
multi-signature wallets (HDPM wallets from now on) based on the algorithm
described in BIP-0032 (BIP32 from now on) and purpose scheme described in 
BIP-0043 (BIP43 from now on).
This BIP is a particular application of BIP43.

==Motivation==

The structure proposed in this document allows for standard ways to create,
use, import, and HDPM wallets. It allows to handle multiple parties sharing
an m-of-n wallet, on the following assumptions:
 - N parties share an m-of-n wallet.
 - Each party generates their master private keys independently.
 - Multisig P2SH is used for all addresses.
 - BIP32 is used to derive public keys, then create a multisig script, and the corresponding P2SH address for that script.
 - Address generation should not require communication between parties. (Thus, all parties must be able to generate all public keys)
 - Transaction creation and signing requires communication between parties.

This BIP will allow interoperability between various DPM wallet implementations.

==Specification==

We define the following levels in BIP32 path:

```
m / purpose' / cosigner_index / change / address_index
```

Apostrophe in the path indicates that BIP32 hardened derivation is used.

Each level has special meaning described in the chapters below.

===Purpose===

Purpose is a constant set to NNNN, following the BIP43 recommendation.
It indicates that the subtree of this node is used according to this specification.

```
m / purpose' / *
```

Hardened derivation is used at this level.


===Cosigner Index===

The index of the party creating a P2SH multisig address. The indices can
be determined independently by lexicographically sorting the master public
keys of each cosigner. Each cosigner creates addresses on it's own branch,
even though they have independent extended master public key, as explained 
in the "Address generation" section.

Software should only use indices corresponding to each of the N cosigners
sequentially. For example, for a 2-of-3 HDPM wallet, having the following
master public keys:
```
03a473275a750a20b7b71ebeadfec83130c014da4b53f1c4743fcf342af6589a38
039863fb5f07b667d9b1ca68773c6e6cdbcac0088ffba9af46f6f6acd153d44463
03f76588e06c0d688617ef365d1e58a7f1aa84daa3801380b1e7f12acc9a69cd13
```

it should use `m / purpose ' / 0 / *` for 
`039863fb5f07b667d9b1ca68773c6e6cdbcac0088ffba9af46f6f6acd153d44463`, 
`m / purpose ' / 1 / *` for
`03a473275a750a20b7b71ebeadfec83130c014da4b53f1c4743fcf342af6589a38`,
and `m / purpose ' / 2 / *` for
`03f76588e06c0d688617ef365d1e58a7f1aa84daa3801380b1e7f12acc9a69cd13`,
as dictated by their lexicographical order.


Software needs to discover all used indexes when importing the seed from
an external source. Such algorithm is described in "Address discovery" chapter.

Non-hardened derivation is used at this level.

===Change===

Constant 0 is used for external chain and constant 1 for internal chain (also
known as change addresses). External chain is used for addresses that are meant
to be visible outside of the wallet (e.g. for receiving payments). Internal
chain is used for addresses which are not meant to be visible outside of the
wallet and is used for return transaction change.

For example, if cosigner 2 wants to generate a change address, he would use
`m / purpose ' / 2 / 1 / *`, and `m / purpose ' / 2 / 0 / *` for a receive
address.

Non-hardened derivation is used at this level.

===Address Index===

Addresses are numbered from index 0 in sequentially increasing manner.
This number is used as child index in BIP32 derivation.

Non-hardened derivation is used at this level.

==Address discovery==

When the master seed is imported from an external source the software should
start to discover the accounts in the following manner:

# derive the first account's node (index = 0)
# derive the external chain node of this account
# scan addresses of the external chain; respect the gap limit described below
# if no transactions are found on the external chain stop discovery
# if there are some transactions, increase the account index and go to step 1

This algorithm is correct, because software should disallow creation of new
accounts if previous one has no transaction history as described in chapter
"Account" above.

Please note that the algorithm works with the transaction history, not account
balances, so you can have account with total 0 coins and the algorithm will
still continue with discovery.

===Address gap limit===

Address gap limit is currently set to 20. If the software hits 20 unused
addresses in a row, it expects there are no used addresses beyond this point
and stops searching the address chain.

Wallet software should warn when user is trying to exceed the gap limit on
an external chain by generating a new address.

==Examples==

{|
!cosigner_id
!chain
!address
!path
|-
|Bitcoin
|first
|external
|first
|m / 44' / 0' / 0' / 0 / 0
|-
|Bitcoin
|first
|external
|second
|m / 44' / 0' / 0' / 0 / 1
|-
|Bitcoin
|first
|change
|first
|m / 44' / 0' / 0' / 1 / 0
|-
|Bitcoin
|first
|change
|second
|m / 44' / 0' / 0' / 1 / 1
|-
|Bitcoin
|second
|external
|first
|m / 44' / 0' / 1' / 0 / 0
|-
|Bitcoin
|second
|external
|second
|m / 44' / 0' / 1' / 0 / 1
|-
|Bitcoin
|second
|change
|first
|m / 44' / 0' / 1' / 1 / 0
|-
|Bitcoin
|second
|change
|second
|m / 44' / 0' / 1' / 1 / 1
|-
|Bitcoin Testnet
|first
|external
|first
|m / 44' / 1' / 0' / 0 / 0
|-
|Bitcoin Testnet
|first
|external
|second
|m / 44' / 1' / 0' / 0 / 1
|-
|Bitcoin Testnet
|first
|change
|first
|m / 44' / 1' / 0' / 1 / 0
|-
|Bitcoin Testnet
|first
|change
|second
|m / 44' / 1' / 0' / 1 / 1
|-
|Bitcoin Testnet
|second
|external
|first
|m / 44' / 1' / 1' / 0 / 0
|-
|Bitcoin Testnet
|second
|external
|second
|m / 44' / 1' / 1' / 0 / 1
|-
|Bitcoin Testnet
|second
|change
|first
|m / 44' / 1' / 1' / 1 / 0
|-
|Bitcoin Testnet
|second
|change
|second
|m / 44' / 1' / 1' / 1 / 1
|}

==Compatible walets==

* [[https://mytrezor.com|myTREZOR web wallet]] ([[https://github.com/trezor/webwallet|source]])

==Reference==

* [[bip-0032.mediawiki|BIP32 - Hierarchical Deterministic Wallets]]
* [[bip-0043.mediawiki|BIP43 - Purpose Field for Deterministic Wallets]]
